/*
 * Copyright (c) 2023 Discover Financial Services
 * Licensed under MIT License. See License.txt in the project root for license information
 */
import { Node } from "../common/node";
import { CSSGenerator, CSSVarGroup } from "./cssGenerator";
import { JSONGenerator } from "./jsonGenerator";
import { IDesignSystem, VarListener, INode } from "../interfaces";
import { MKDOCSCSSGenerator, MKDOCSCSSVarGroup} from "./mkdocs-cssGenerator";

/**
 * Code generation for theme builder.
 * @category Generators
 */
export class Code extends Node {

    /** The CSS code generator */
    public cssGenerator: CSSGenerator;
    public jsonGenerator: JSONGenerator;

    public mkdocsCSSGenerator: MKDOCSCSSGenerator;

    constructor(ds: IDesignSystem) {
        super("code", ds);
        this.cssGenerator = new CSSGenerator(ds);
        this.jsonGenerator = new JSONGenerator(ds);
        this.mkdocsCSSGenerator = new MKDOCSCSSGenerator(ds);
        this.addDependency(ds.atoms);
    }

    public generate() {
        this.cssGenerator.generate();
    }

    /**
     * Get all CSS variables for this design system.
     * @returns All CSS variables for this design system.
     */
    public getCSSVars(): {[name: string]: string} {
        return this.cssGenerator.getVars();
    }

    /**
     * Set a CSS variable listener which is called each time a CSS variable value is changed.
     * @param name The listener name.
     * @param listener The listener callback.
     */
    public setCSSVarListener(name: string, listener?: VarListener) {
        this.cssGenerator.setCSSVarListener(name, listener);
    }

    /**
     * Get a group of CSS variables associated with a particular node (i.e. atom, molecule, or organism).
     * @param node The node for which we are getting the group of variables.
     * @returns The variable group
     */
    public getCSSVarGroup(node: INode): CSSVarGroup {
        return this.cssGenerator.getVarGroup(node.key);
    }

    /**
     * Get all keys of all CSS variable groups.
     * @returns All keys associated with all CSS variable groups.
     */
    public getCSSVarGroupKeys(): string[] {
        return this.cssGenerator.getVarGroupKeys();
    }

    /**
     * Get the JSON code generated by the theme builder for the default theme.
     * @param lm True for light mode; false for dark mode.
     * @returns The JSON object.
     */
    public getJSON(lm: boolean): Object {
        return this.jsonGenerator.getJSON(lm);
    }

    public getMKDOCSCSSVars(): {[name: string]: string} {
        return this.mkdocsCSSGenerator.getVars();
    }

    /**
     * Set a CSS variable listener which is called each time a CSS variable value is changed.
     * @param name The listener name.
     * @param listener The listener callback.
     */
    public setMKDOCSCSSVarListener(name: string, listener?: VarListener) {
        this.mkdocsCSSGenerator.setCSSVarListener(name, listener);
    }

    /**
     * Get a group of CSS variables associated with a particular node (i.e. atom, molecule, or organism).
     * @param node The node for which we are getting the group of variables.
     * @returns The variable group
     */
    public getMKDOCSCSSVarGroup(node: INode): MKDOCSCSSVarGroup {
        return this.mkdocsCSSGenerator.getVarGroup(node.key);
    }

    /**
     * Get all keys of all CSS variable groups.
     * @returns All keys associated with all CSS variable groups.
     */
    public getMKDOCSCSSVarGroupKeys(): string[] {
        return this.mkdocsCSSGenerator.getVarGroupKeys();
    }

}